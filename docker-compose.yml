services:
  backend:
    env_file:
      - .env.dev
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: annapos-backend
    ports:
      - "${API_PORT}:${API_PORT}"
      - "9229:9229" # debug port
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app # host files override container
      - /app/node_modules # preserve installed os-specific node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true #polling for nodemon
    profiles: [ "dev" ]

  frontend:
    env_file:
      - .env.dev
    build:
      context: frontend
      dockerfile: Dockerfile
    container_name: annapos-frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app # host files override container
      - /app/node_modules # preserve installed os-specific node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true #polling for nodemon
    profiles: [ "dev" ]

  annapos:
    env_file:
      - .env.prod
    build:
      context: .
      dockerfile: Dockerfile
    container_name: annapos
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      db:
        condition: service_healthy
    profiles: [ "prod" ]

  db:
    image: postgres:17-alpine3.22
    container_name: postgres-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:${POSTGRES_PORT}"
    volumes:
      - ./.data/dev_db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 15s
      timeout: 5s
      retries: 5
    profiles: [ "dev", "prod" ]
